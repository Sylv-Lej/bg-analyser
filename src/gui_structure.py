import cv2THRESH_DIFF_HORIZONTAL = 15THRESH_DIFF_BAR = 15class BackGamonIMG:    def __init__(self, img = None):        scale_factor = 1.41        self.debug_img = img                self.fleche_list = []        for i in range(6):            stride = int(71 / scale_factor)            max_x = int(1012 / scale_factor)            pos = max_x - i * stride            self.fleche_list.append(Position(pos, int(850/ scale_factor)))                for i in range(6):            stride = int(71 / scale_factor)            max_x = int(494 / scale_factor)            pos = max_x - i * stride            self.fleche_list.append(Position(pos, int(850/ scale_factor)))                for i in range(6):            stride = int(71 / scale_factor)            min_x = int(139 / scale_factor)            pos = min_x + i * stride            self.fleche_list.append(Position(pos, int(44/ scale_factor)))                    for i in range(6):            stride = int(71 / scale_factor)            max_x = int(657 / scale_factor)            pos = max_x + i * stride            self.fleche_list.append(Position(pos, int(44/ scale_factor)))    def set_debug_img(self, img):        self.debug_img = img    def set_bar_position(self, largeur, hauteur):        self.bar_position_x = int(largeur/2)        self.bar_position_y = int(hauteur/2)    def debug_by_img(self):        if(self.debug_img is not None):            for i in self.fleche_list:                cv2.circle(self.debug_img, (i.x, i.y), 5, (255, 255, 0), 2)            cv2.circle(self.debug_img, (self.bar_position_x, self.bar_position_y), 5, (255, 0, 255), 2)            cv2.imshow("debug img", self.debug_img)            cv2.waitKey(0)    def debug(self):        for fl in range(len(self.fleche_list)):            print(self.fleche_list[fl])    def getFlechePlusPres(self, center_analysed, vertical_side):        diff_bar = abs(center_analysed - self.bar_position_x)        if(diff_bar < THRESH_DIFF_BAR):            return -1        if(vertical_side == 'top'):            fleche_id = 13            for i in range(len(self.fleche_list[12:])):                diff = abs(center_analysed - self.fleche_list[12 + i].x)                # print("diff {} on {}".format(diff, fleche_id))                if(diff < THRESH_DIFF_HORIZONTAL):                    return fleche_id                fleche_id += 1        else:            fleche_id = 1            for i in range(len(self.fleche_list[:12])):                diff = abs(center_analysed - self.fleche_list[i].x)                # print("diff {} on {}".format(diff, fleche_id))                if(diff < THRESH_DIFF_HORIZONTAL):                    return fleche_id                fleche_id += 1class Position:    def __init__(self, x, y):        self.y = y        self.x = x    def setPos(self, new_x, new_y):        self.y = new_y        self.x = new_x    def __str__(self):        return "x : {}, y : {}".format(self.x, self.y)# bg = BackGamonIMG()# bg.debug()# res = bg.getFlechePlusPres(133, 'haut')# print("----------")# print(res)# img = cv2.imread("../data/test/beginning.png", 1)# cv2.imshow("img", img)# cv2.waitKey(0)